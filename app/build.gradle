plugins {
    id "org.sonarqube" version "2.5"
}
apply plugin: 'jacoco'
apply plugin: 'com.android.application'



android {
    compileSdkVersion 26
    buildToolsVersion '25.0.3'
    defaultConfig {
        applicationId "fr.ensicaen.present.present"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    //Allows for different configurations types ...use BuildConfig.API_URL for example
    productFlavors {
        prod {

        }
        dev {
            buildConfigField 'String', 'API_URL', '"http://localhost:8080/"'
        }
    }

    sonarqube {
        properties {

            property "sonar.organization", "present"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.login", "c338049a2948b5443ad12c3eb1bcb915d80ac8df"
            //property "sonar.username", "jueast08@github"
            //property "sonar.password", "c338049a2948b5443ad12c3eb1bcb915d80ac8df"

            //property "sonar.projectKey", "key-for-your-project"
            property "sonar.projectName", "Pr√©sent_Frontend"
            property "sonar.projectVersion", "${version}"

            property "sonar.sources", "src"

            property "sonar.java.source", "7"

            property "sonar.android.lint.report", "build/outputs/lint-results.xml"
            //property "sonar.java.binaries", "build/intermediates/classes/dev/debug" //breaks because there are not CLASSES !
            property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec"
            //property "sonar.jacoco.itReportPath", instrumentationFileName //later for emulator tests

            //property "sonar.test.inclusions", "**/*Test*/**"
            property "sonar.exclusions", "**/*test*/**, **/*Test*/**"
        }
    }

    testOptions {
        unitTests.all { /* JACOCO TEST COVERAGE */
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    // Test Logging
    tasks.withType(Test) {
        testLogging {
            events "standardOut", "started", "passed", "skipped", "failed"
        }
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // dependency injection


    compile 'com.android.support:appcompat-v7:26.0.0-alpha1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.okhttp3:okhttp:3.9.0'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.dagger:dagger:2.4'
    compile 'com.android.support:design:26.0.0-alpha1'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.dagger:dagger:2.4'
    compile 'com.android.support:design:26.0.0-alpha1'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.4'
    compile 'com.android.support:cardview-v7:26.0.0-alpha1'

    //mockito dependencies
    // required if you want to use Mockito for unit tests
    testCompile 'org.mockito:mockito-core:2.7.22'
    // required if you want to use Mockito for Android tests
    androidTestCompile 'org.mockito:mockito-android:2.7.22'
}

task createTestReport(type: JacocoReport, dependsOn: ['test', 'testDebugUnitTest']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$MembersInjector*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/dev/dls ebug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")
}

task createUnitInstrumentTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$MembersInjector*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/dev/dls ebug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")
}

